From: Jon Trowbridge <trow@novell.com>, Fredrik Hedberg <fhedberg@novell.com>

Allow custom per-directory locking behaviour to be defined at initialization
time.

Index: Store/FSDirectory.cs
===================================================================
RCS file: /cvs/gnome/beagle/beagled/Lucene.Net/Store/FSDirectory.cs,v
retrieving revision 1.19.2.14
diff -u -3 -p -r1.19.2.14 FSDirectory.cs
--- Store/FSDirectory.cs	25 Sep 2006 23:00:22 -0000	1.19.2.14
+++ Store/FSDirectory.cs	25 Sep 2006 23:01:23 -0000
@@ -54,7 +54,7 @@ namespace Lucene.Net.Store
 			public override bool Obtain()
 			{
 				Log ("Trying to obtain lock " + lockFile.FullName);
-				if (Lucene.Net.Store.FSDirectory.disableLocks)
+				if (Lucene.Net.Store.FSDirectory.disableLocks || Enclosing_Instance.InstanceDisableLock)
 					return true;
 				
 				bool tmpBool;
@@ -133,7 +133,7 @@ namespace Lucene.Net.Store
             }
 			public override void  Release()
 			{
-				if (Lucene.Net.Store.FSDirectory.disableLocks)
+				if (Lucene.Net.Store.FSDirectory.disableLocks || Enclosing_Instance.InstanceDisableLock)
 					return ;
 				bool tmpBool;
 				if (System.IO.File.Exists(lockFile.FullName))
@@ -160,7 +160,7 @@ namespace Lucene.Net.Store
 			}
 			public override bool IsLocked()
 			{
-				if (Lucene.Net.Store.FSDirectory.disableLocks)
+				if (Lucene.Net.Store.FSDirectory.disableLocks || Enclosing_Instance.InstanceDisableLock)
 					return false;
 				bool tmpBool;
 				if (System.IO.File.Exists(lockFile.FullName))
@@ -203,7 +203,13 @@ namespace Lucene.Net.Store
 		{
 			return FSDirectory.disableLocks;
 		}
-		
+
+		private bool instance_disable_lock = false;
+		public bool InstanceDisableLock {
+			get { return instance_disable_lock; }
+			set { instance_disable_lock = value; }
+		}
+
 		/// <summary> Directory specified by <code>Lucene.Net.lockDir</code>
 		/// or <code>java.io.tmpdir</code> system property
 		/// </summary>
@@ -232,7 +238,7 @@ namespace Lucene.Net.Store
 		/// </returns>
 		public static FSDirectory GetDirectory(System.String path, bool create)
 		{
-			return GetDirectory(new System.IO.FileInfo(path), create);
+			return GetDirectory(new System.IO.FileInfo(path), null, create, false);
 		}
 		
 		/// <summary>Returns the directory instance for the named location.
@@ -250,6 +256,70 @@ namespace Lucene.Net.Store
 		/// </returns>
 		public static FSDirectory GetDirectory(System.IO.FileInfo file, bool create)
 		{
+			return GetDirectory(file, null, create, false);
+		}
+
+		/// <summary>Returns the directory instance for the named location.
+		/// 
+		/// <p>Directories are cached, so that, for a given canonical path, the same
+		/// FSDirectory instance will always be returned.  This permits
+		/// synchronization on directories.
+		/// 
+		/// </summary>
+		/// <param name="path">the path to the directory.
+		/// </param>
+		/// <param name="tmpDir">the path to use as lock directory.
+		/// </param>
+		/// <param name="create">if true, create, or erase any existing contents.
+		/// </param>
+		/// <returns> the FSDirectory for the named file.  
+		/// </returns>
+		public static FSDirectory GetDirectory(System.String path, System.String tmpDir, bool create)
+		{
+			return GetDirectory(new System.IO.FileInfo(path), tmpDir, create, false);
+		}
+
+		/// <summary>Returns the directory instance for the named location.
+		/// 
+		/// <p>Directories are cached, so that, for a given canonical path, the same
+		/// FSDirectory instance will always be returned.  This permits
+		/// synchronization on directories.
+		/// 
+		/// </summary>
+		/// <param name="path">the path to the directory.
+		/// </param>
+		/// <param name="tmpDir">the path to use as lock directory.
+		/// </param>
+		/// <param name="create">if true, create, or erase any existing contents.
+		/// </param>
+		/// <param name="disable_locks">if true, disable internal locking
+		/// </param>
+		/// <returns> the FSDirectory for the named file.  
+		/// </returns>
+		public static FSDirectory GetDirectory(System.String path, System.String tmpDir, bool create, bool disable_locks)
+		{
+			return GetDirectory(new System.IO.FileInfo(path), tmpDir, create, disable_locks);
+		}
+
+		/// <summary>Returns the directory instance for the named location.
+		/// 
+		/// <p>Directories are cached, so that, for a given canonical path, the same
+		/// FSDirectory instance will always be returned.  This permits
+		/// synchronization on directories.
+		/// 
+		/// </summary>
+		/// <param name="file">the path to the directory.
+		/// </param>
+		/// <param name="tmpDir">the path to use as lock directory.
+		/// </param>
+		/// <param name="create">if true, create, or erase any existing contents.
+		/// </param>
+		/// <param name="disable_locks">if true, disable internal locking
+		/// </param>
+		/// <returns> the FSDirectory for the named file.  
+		/// </returns>
+		public static FSDirectory GetDirectory(System.IO.FileInfo file, System.String tmpdir, bool create, bool disable_locks)
+		{
 			file = new System.IO.FileInfo(file.FullName);
 			FSDirectory dir;
 			lock (DIRECTORIES.SyncRoot)
@@ -265,7 +335,7 @@ namespace Lucene.Net.Store
 					{
 						throw new System.SystemException("cannot load FSDirectory class: " + e.ToString());
 					}
-					dir.Init(file, create);
+					dir.Init(file, tmpdir, create, disable_locks);
 					DIRECTORIES[file] = dir;
 				}
 				else if (create)
@@ -290,11 +360,17 @@ namespace Lucene.Net.Store
 		
 		// permit subclassing
 		
-		private void  Init(System.IO.FileInfo path, bool create)
+	        private void  Init(System.IO.FileInfo path, System.String tmpDir, bool create, bool disable_locks)
 		{
 			directory = path;
-			
-			if (LOCK_DIR == null)
+			this.instance_disable_lock = disable_locks;
+
+
+			if (tmpDir != null)
+			{
+				lockDir = new System.IO.FileInfo(tmpDir);
+			}
+			else if (LOCK_DIR == null)
 			{
 				lockDir = directory;
 			}
