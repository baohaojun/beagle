From: Daniel Drake <dsd@gentoo.org>

Exception handling is expensive, lets avoid it where possible.

Index: Index/FieldInfos.cs
===================================================================
RCS file: /cvs/gnome/beagle/beagled/Lucene.Net/Index/FieldInfos.cs,v
retrieving revision 1.5.4.6
diff -u -3 -p -r1.5.4.6 FieldInfos.cs
--- Index/FieldInfos.cs	30 Sep 2006 01:38:28 -0000	1.5.4.6
+++ Index/FieldInfos.cs	30 Sep 2006 02:08:58 -0000
@@ -227,16 +227,9 @@ namespace Lucene.Net.Index
 		
 		public int FieldNumber(System.String fieldName)
 		{
-			try
-			{
-				FieldInfo fi = FieldInfo(fieldName);
-				if (fi != null)
-					return fi.number;
-			}
-			catch (System.IndexOutOfRangeException ioobe)
-			{
-				return - 1;
-			}
+			FieldInfo fi = FieldInfo(fieldName);
+			if (fi != null)
+				return fi.number;
 			return - 1;
 		}
 		
@@ -255,14 +248,11 @@ namespace Lucene.Net.Index
 		/// </returns>
 		public System.String FieldName(int fieldNumber)
 		{
-			try
-			{
-				return FieldInfo(fieldNumber).name;
-			}
-			catch (System.NullReferenceException)
-			{
+			FieldInfo info = FieldInfo(fieldNumber);
+			if (info == null)
 				return "";
-			}
+			else
+				return info.name;
 		}
 		
 		/// <summary> Return the fieldinfo object referenced by the fieldNumber.</summary>
@@ -273,14 +263,11 @@ namespace Lucene.Net.Index
 		/// </returns>
 		public FieldInfo FieldInfo(int fieldNumber)
 		{
-			try
-			{
-				return (FieldInfo) byNumber[fieldNumber];
-			}
-			catch (System.ArgumentOutOfRangeException) // (System.IndexOutOfRangeException)
+			if (fieldNumber < 0 || fieldNumber >= byNumber.Count)
 			{
-				return null;
+			    return null;
 			}
+	                return (FieldInfo) byNumber[fieldNumber];
 		}
 		
 		public int Size()
