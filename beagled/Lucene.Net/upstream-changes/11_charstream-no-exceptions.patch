From: Daniel Drake <dsd@gentoo.org>

Tracing shows that the exception thrown inside Refill() is thrown hundreds of
times when indexing a small amount of files.

Reduce overhead by removing exceptions from handling of this particular error.

Note: During migration to 1.9.1 there was an error in porting this patch.
As a result after applying this patch, Analysis/Standard/StandardTokenizerTokenManager.cs
won't compile. Apply patch# 21 which fixes this issue.

Index: Analysis/Standard/CharStream.cs
===================================================================
RCS file: /cvs/gnome/beagle/beagled/Lucene.Net/Analysis/Standard/CharStream.cs,v
retrieving revision 1.3.4.5
diff -u -3 -p -r1.3.4.5 CharStream.cs
--- Analysis/Standard/CharStream.cs	25 Sep 2006 22:36:28 -0000	1.3.4.5
+++ Analysis/Standard/CharStream.cs	30 Sep 2006 02:39:59 -0000
@@ -40,7 +40,7 @@ namespace Lucene.Net.Analysis.Standard
 		/// of selecting the input is the responsibility of the class
 		/// implementing this interface.  Can throw any java.io.IOException.
 		/// </summary>
-		char ReadChar();
+		int ReadChar();
 		
 		/// <summary> Returns the column position of the character last read.</summary>
 		/// <deprecated> 
@@ -87,7 +87,7 @@ namespace Lucene.Net.Analysis.Standard
 		/// All characters must remain in the buffer between two successive calls
 		/// to this method to implement backup correctly.
 		/// </summary>
-		char BeginToken();
+		int BeginToken();
 		
 		/// <summary> Returns a string made up of characters from the marked token beginning 
 		/// to the current buffer position. Implementations have the choice of returning
@@ -115,4 +115,4 @@ namespace Lucene.Net.Analysis.Standard
 		/// </summary>
 		void  Done();
 	}
-}
\ No newline at end of file
+}
Index: Analysis/Standard/FastCharStream.cs
===================================================================
RCS file: /cvs/gnome/beagle/beagled/Lucene.Net/Analysis/Standard/FastCharStream.cs,v
retrieving revision 1.3.4.5
diff -u -3 -p -r1.3.4.5 FastCharStream.cs
--- Analysis/Standard/FastCharStream.cs	25 Sep 2006 22:36:28 -0000	1.3.4.5
+++ Analysis/Standard/FastCharStream.cs	30 Sep 2006 02:39:59 -0000
@@ -41,14 +41,15 @@ namespace Lucene.Net.Analysis.Standard
 			input = r;
 		}
 		
-		public char ReadChar()
+		public int ReadChar()
 		{
 			if (bufferPosition >= bufferLength)
-				Refill();
+				if (!Refill())
+					return -1;
 			return buffer[bufferPosition++];
 		}
 		
-		private void  Refill()
+		private bool  Refill()
 		{
 			int newPosition = bufferLength - tokenStart;
 			
@@ -81,12 +82,13 @@ namespace Lucene.Net.Analysis.Standard
 			
 			int charsRead = input.Read(buffer, newPosition, buffer.Length - newPosition);
 			if (charsRead <= 0)
-				throw new System.IO.IOException("read past eof");
-			else
-				bufferLength += charsRead;
+				return false;
+
+			bufferLength += charsRead;
+			return true;
 		}
 		
-		public char BeginToken()
+		public int BeginToken()
 		{
 			tokenStart = bufferPosition;
 			return ReadChar();
@@ -146,4 +148,4 @@ namespace Lucene.Net.Analysis.Standard
 			return 1;
 		}
 	}
-}
\ No newline at end of file
+}
Index: Analysis/Standard/StandardTokenizerTokenManager.cs
===================================================================
RCS file: /cvs/gnome/beagle/beagled/Lucene.Net/Analysis/Standard/StandardTokenizerTokenManager.cs,v
retrieving revision 1.7.4.7
diff -u -3 -p -r1.7.4.7 StandardTokenizerTokenManager.cs
--- Analysis/Standard/StandardTokenizerTokenManager.cs	25 Sep 2006 22:36:28 -0000	1.7.4.7
+++ Analysis/Standard/StandardTokenizerTokenManager.cs	30 Sep 2006 02:40:00 -0000
@@ -1180,14 +1180,11 @@ MatchLoop1: 
 				++curPos;
 				if ((i = jjnewStateCnt) == (startsAt = 75 - (jjnewStateCnt = startsAt)))
 					return curPos;
-				try
-				{
-					curChar = input_stream.ReadChar();
-				}
-				catch (System.IO.IOException)
-				{
+				int ret = input_stream.ReadChar();
+				if (ret != -1)
+					curChar = (char) ret;
+				else
 					return curPos;
-				}
 			}
 		}
 		internal static readonly int[] jjnextStates = new int[]{30, 31, 32, 34, 38, 39, 41, 42, 46, 47, 53, 54, 5, 6, 10, 11, 19, 20, 3, 4, 8, 9, 17, 18, 31, 32, 34, 32, 33, 34, 65, 66, 68, 69, 72, 73, 5, 6, 19, 20, 25, 26, 50, 51, 70, 71, 12, 13, 14, 15, 23, 24, 43, 44, 48, 49, 55, 56, 59, 60, 61, 62};
@@ -1366,11 +1363,11 @@ MatchLoop1: 
 			
 			for (; ; )
 			{
-				try
-				{
-					curChar = input_stream.BeginToken();
-				}
-				catch (System.IO.IOException)
+				
+				int ret = input_stream.BeginToken();
+				if (ret != -1)
+					curChar = (char) ret;
+				else
 				{
 					jjmatchedKind = 0;
 					matchedToken = JjFillToken();
@@ -1402,11 +1399,7 @@ MatchLoop1: 
 				int error_column = input_stream.GetEndColumn();
 				System.String error_after = null;
 				bool EOFSeen = false;
-				try
-				{
-					input_stream.ReadChar(); input_stream.Backup(1);
-				}
-				catch (System.IO.IOException)
+				if (input_stream.ReadChar() == -1)
 				{
 					EOFSeen = true;
 					error_after = curPos <= 1?"":input_stream.GetImage();
@@ -1418,6 +1411,9 @@ MatchLoop1: 
 					else
 						error_column++;
 				}
+				else
+					input_stream.Backup(1);
+
 				if (!EOFSeen)
 				{
 					input_stream.Backup(1);
@@ -1429,4 +1425,4 @@ EOFLoop: ;
 			}
 		}
 	}
-}
\ No newline at end of file
+}
